   1              	# 1 "../Startup/startup_XMC1400.S"
   1              	/**************************************************************************************************
   0              	
   0              	
   2              	 * @file     startup_XMC1400.S
   3              	 * @brief    CMSIS Core Device Startup File for Infineon XMC1400 Device Series
   4              	 * @version  V1.3
   5              	 * @date     15 Mai 2020
   6              	 *
   7              	 * @cond
   8              	 **************************************************************************************************
   9              	 * Copyright (c) 2015-2020, Infineon Technologies AG
  10              	 * All rights reserved.                        
  11              	 *                                             
  12              	 * Boost Software License - Version 1.0 - August 17th, 2003
  13              	 * 
  14              	 * Permission is hereby granted, free of charge, to any person or organization
  15              	 * obtaining a copy of the software and accompanying documentation covered by
  16              	 * this license (the "Software") to use, reproduce, display, distribute,
  17              	 * execute, and transmit the Software, and to prepare derivative works of the
  18              	 * Software, and to permit third-parties to whom the Software is furnished to
  19              	 * do so, all subject to the following:
  20              	 * 
  21              	 * The copyright notices in the Software and this entire statement, including
  22              	 * the above license grant, this restriction and the following disclaimer,
  23              	 * must be included in all copies of the Software, in whole or in part, and
  24              	 * all derivative works of the Software, unless such copies or derivative
  25              	 * works are solely in the form of machine-executable object code generated by
  26              	 * a source language processor.
  27              	 * 
  28              	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29              	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30              	 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31              	 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32              	 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33              	 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34              	 * DEALINGS IN THE SOFTWARE.
  35              	 *                                                                              
  36              	 * To improve the quality of the software, users are encouraged to share 
  37              	 * modifications, enhancements or bug fixes with Infineon Technologies AG 
  38              	 * at XMCSupport@infineon.com.
  39              	 **************************************************************************************************
  40              	 *
  41              	 **************************** Change history ********************************
  42              	 * V1.0, Sep, 03, 2015 JFT:Initial version
  43              	 *                         MCLK=8MHz, PCLK=16MHz
  44              	 * V1.1, Jan, 05, 2016 JFT:Fix .reset section attributes
  45              	 * V1.2, Sep, 15, 2017 JFT:Added option to select wait time before ASC BSL channel selection (WAIT_
  46              	 * V1.3, Mai, 15, 2020 JFT:Added option (ENABLE_OWN_HANDLER) to generate a individual interrupt han
  47              	 *
  48              	 * @endcond 
  49              	 */
  50              	
  51              	/*****************************************************************************
  52              	 * <h> Clock system handling by SSW
  53              	 *  <h> CLK_VAL1 Configuration
  54              	 *   <o0.0..9>    FDIV Fractional Divider Selection <0-1023>
  55              	 *   <i> Deafult: 0. Fractional part of clock divider, MCLK = DCO1 / (IDIV + (FDIV / 1024))
  56              	 *   <o0.10..17>  IDIV Divider Selection <1-16>
  57              	 *   <i> Deafult: 6. Interger part of clock divider, MCLK = DCO1 / (IDIV + (FDIV / 1024) = 8MHz)
  58              	 *   <o0.18>      PCLKSEL PCLK Clock Select
  59              	 *                   <0=> PCLK = MCLK
  60              	 *                   <1=> PCLK = 2 x MCLK
  61              	 *   <i> Deafult: 2 x MCLK
  62              	 *   <o0.19..21>  RTCCLKSEL RTC Clock Select
  63              	 *                   <0=> 32.768kHz standby clock
  64              	 *                   <1=> 32.768kHz external clock from ERU0.IOUT0
  65              	 *                   <2=> 32.768kHz external clock from ACMP0.OUT
  66              	 *                   <3=> 32.768kHz external clock from ACMP1.OUT
  67              	 *                   <4=> 32.768kHz external clock from ACMP2.OUT
  68              	 *                   <5=> 32.768kHz XTAL clock via OSC_LP
  69              	 *                   <6=> Reserved
  70              	 *                   <7=> Reserved
  71              	 *   <i> Deafult: 32.768kHz standby clock
  72              	 *   <o0.31>      do not move CLK_VAL1 to SCU_CLKCR[0..19]
  73              	 * </h>
  74              	 *****************************************************************************/
  75              	#define CLKVAL1_SSW 0x00041800
  76              	
  77              	/*****************************************************************************
  78              	 *  <h> CLK_VAL2 Configuration
  79              	 *    <o0.0>    disable VADC and SHS Gating
  80              	 *    <o0.1>    disable CCU80 Gating
  81              	 *    <o0.2>    disable CCU40 Gating
  82              	 *    <o0.3>    disable USIC0 Gating
  83              	 *    <o0.4>    disable BCCU0 Gating
  84              	 *    <o0.5>    disable LEDTS0 Gating
  85              	 *    <o0.6>    disable LEDTS1 Gating
  86              	 *    <o0.7>    disable POSIF0 Gating
  87              	 *    <o0.8>    disable MATH Gating
  88              	 *    <o0.9>    disable WDT Gating
  89              	 *    <o0.10>   disable RTC Gating
  90              	 *    <o0.16>   disable CCU81 Gating
  91              	 *    <o0.17>   disable CCU41 Gating 
  92              	 *    <o0.18>   disable USIC1 Gating
  93              	 *    <o0.19>   disable LEDTS2 Gating 
  94              	 *    <o0.20>   disable POSIF1 Gating
  95              	 *    <o0.21>   disable MCAN0 Gating
  96              	 *    <o0.31>   do not move CLK_VAL2 to SCU_CGATCLR0[0..10]
  97              	 *  </h>
  98              	 *****************************************************************************/
  99              	#define CLKVAL2_SSW 0x00000100
 100              	
 101              	/*****************************************************************************
 102              	 *  <h> WAIT_ASCBSL_ENTRY Configuration
 103              	 *    <o0.0..30>    Wait time before ASC BSL channel selection (number of MCLK clock cycles)
 104              	 *    <o0.31>       Disable wait time before ASC BSL channel selection
 105              	 *  </h>
 106              	 *****************************************************************************/
 107              	#define WAIT_ASCBSL_ENTRY_SSW 0x80000000
 108              	
 109              	/* A couple of macros to ease definition of the various handlers */
 110              	.macro Insert_InterruptHandler Interrupt
 111              	    .weak \Interrupt\()_Handler
 112              	#if defined(ENABLE_OWN_HANDLER)
 113              	    .thumb_func
 115              	\Interrupt\()_Handler:
 116              	    b .
 118              	#else
 119              	    .thumb_set \Interrupt\()_Handler, Default_Handler
 120              	#endif 
 121              	.endm
 122              	
 123              	.macro Insert_InterruptVeener Interrupt
 124              	    .globl \Interrupt\()_Veener
 125              	\Interrupt\()_Veener:
 126              	    LDR R0, =\Interrupt\()_Handler
 127              	    BX  R0
 128              	.endm
 129              	
 130              	/* ================== START OF VECTOR TABLE DEFINITION ====================== */
 131              	/* Vector Table - This is indirectly branched to through the veneers */
 132              	    .syntax unified   
 133              	    .cpu cortex-m0
 134              	
 135              	    .section .reset, "a", %progbits
 136              	    
 137              	 	.align 2
 138              	    
 139              	    .globl  __Vectors
 141              	__Vectors:
 142 0000 00000000 	    .long   __initial_sp                /* Top of Stack                 */
 143 0004 00000000 	    .long   Reset_Handler               /* Reset Handler                */
 144              	/* 
 145              	 * All entries below are redundant for M0, but are retained because they can
 146              	 * in the future be directly ported to M0 Plus devices.
 147              	 */
 148 0008 00000000 	    .long   0                           /* Reserved                     */
 149 000c 00000000 	    .long   HardFault_Handler           /* Hard Fault Handler           */
 150 0010 00180400 	    .long   CLKVAL1_SSW                 /* Reserved                     */
 151 0014 00010000 	    .long   CLKVAL2_SSW                 /* Reserved                     */
 152 0018 00000080 	    .long   WAIT_ASCBSL_ENTRY_SSW       /* Reserved                     */
 153              	#ifdef RETAIN_VECTOR_TABLE
 154              	    .long   0                           /* Reserved                     */
 155              	    .long   0                           /* Reserved                     */
 156              	    .long   0                           /* Reserved                     */
 157              	    .long   0                           /* Reserved                     */
 158              	    .long   SVC_Handler                 /* SVCall Handler               */
 159              	    .long   0                           /* Reserved                     */
 160              	    .long   0                           /* Reserved                     */
 161              	    .long   PendSV_Handler              /* PendSV Handler               */
 162              	    .long   SysTick_Handler             /* SysTick Handler              */
 163              	
 164              	    /* Interrupt Handlers for Service Requests (SR) from XMC1400 Peripherals */
 165              	    .long   IRQ0_Handler				/* SCU.SR0, CAN0.SR0, CCU40.SR0, SCU.SR0 | CAN0.SR0 */
 166              	    .long   IRQ1_Handler				/* SCU.SR1, CAN0.SR1, CCU80.SR0, SCU.SR1 | CAN0.SR1 */
 167              	    .long   IRQ2_Handler				/* SCU.SR2, CAN0.SR2, CCU80.SR1, SCU.SR2 | CAN0.SR2 */
 168              	    .long   IRQ3_Handler				/* ERU0.SR0, ERU1.SR0, CAN0.SR0, ERU0.SR0 | ERU1.SR0 */
 169              	    .long   IRQ4_Handler                /* ERU0.SR1, ERU1.SR1, CAN0.SR1, ERU0.SR1 | ERU1.SR1 */
 170              	    .long   IRQ5_Handler                /* ERU0.SR2, ERU1.SR2, CAN0.SR2, ERU0.SR2 | ERU1.SR2 */
 171              	    .long   IRQ6_Handler                /* ERU0.SR3, ERU1.SR3, CAN0.SR3, ERU0.SR3 | ERU1.SR3 */
 172              	    .long   IRQ7_Handler                /* MATH.SR0, CAN0.SR3, CCU40.SR1, MATH.SR0 | CAN0.SR3 */
 173              	    .long   IRQ8_Handler                /* LEDTS2.SR0, CCU40.SR0, CCU80.SR0, LEDTS2.SR0 | CCU40.SR0
 174              	    .long   IRQ9_Handler                /* USIC0.SR0, USIC1.SR0, ERU0.SR0, USIC0.SR0 | USIC1.SR0 */
 175              	    .long   IRQ10_Handler               /* USIC0.SR1, USIC1.SR1, ERU0.SR1, USIC0.SR1 | USIC1.SR1 */
 176              	    .long   IRQ11_Handler               /* USIC0.SR2, USIC1.SR2, ERU0.SR2, USIC0.SR2 | USIC1.SR2 */
 177              	    .long   IRQ12_Handler               /* USIC0.SR3, USIC1.SR3, ERU0.SR3, USIC0.SR3 | USIC1.SR3 */
 178              	    .long   IRQ13_Handler               /* USIC0.SR4, USIC1.SR4, CCU80.SR1, USIC0.SR4 | USIC1.SR4 *
 179              	    .long   IRQ14_Handler               /* USIC0.SR5, USIC1.SR5, POSIF0.SR0, USIC0.SR5 | USIC1.SR5 
 180              	    .long   IRQ15_Handler               /* VADC0.C0SR0, USIC0.SR0, POSIF0.SR1, VADC0.C0SR0 | USIC0.
 181              	    .long   IRQ16_Handler			    /* VADC0.C0SR1, USIC0.SR1, CCU40.SR2, VADC0.C0SR1 | USIC0.SR1 */
 182              	    .long   IRQ17_Handler               /* VADC0.G0SR0, USIC0.SR2, CAN0.SR0, VADC0.G0SR0 | USIC0.SR
 183              	    .long   IRQ18_Handler               /* VADC0.G0SR1, USIC0.SR3, CAN0.SR1, VADC0.G0SR1 | USIC0.SR
 184              	    .long   IRQ19_Handler               /* VADC0.G1SR0, USIC0.SR4, CAN0.SR2, VADC0.G1SR0 | USIC0.SR
 185              	    .long   IRQ20_Handler               /* VADC0.G1SR1, USIC0.SR5, CAN0.SR3, VADC0.G1SR1 | USIC0.SR
 186              	    .long   IRQ21_Handler               /* CCU40.SR0, CCU41.SR0, USIC0.SR0, CCU40.SR0 | CCU41.SR0 *
 187              	    .long   IRQ22_Handler               /* CCU40.SR1, CCU41.SR1, USIC0.SR1, CCU40.SR1 | CCU41.SR1 *
 188              	    .long   IRQ23_Handler               /* CCU40.SR2, CCU41.SR2, USIC0.SR2, CCU40.SR2 | CCU41.SR2 *
 189              	    .long   IRQ24_Handler               /* CCU40.SR3, CCU41.SR3, USIC0.SR3, CCU40.SR3 | CCU41.SR3 *
 190              	    .long   IRQ25_Handler               /* CCU80.SR0, CCU81.SR0, USIC0.SR4, CCU80.SR0 | CCU81.SR0 *
 191              	    .long   IRQ26_Handler               /* CCU80.SR1, CCU81.SR1, USIC0.SR5, CCU80.SR1 | CCU81.SR1 *
 192              	    .long   IRQ27_Handler               /* POSIF0.SR0, POSIF1.SR0, CCU40.SR3, POSIF0.SR0 | POSIF1.S
 193              	    .long   IRQ28_Handler               /* POSIF0.SR1, POSIF1.SR1, ERU0.SR0, POSIF0.SR1 | POSIF1.SR
 194              	    .long   IRQ29_Handler               /* LEDTS0.SR0, CCU40.SR1, ERU0.SR1, LEDTS0.SR0 | CCU40.SR1 
 195              	    .long   IRQ30_Handler               /* LEDTS1.SR0, CCU40.SR2, ERU0.SR2, LEDTS1.SR0 | CCU40.SR2 
 196              	    .long   IRQ31_Handler               /* BCCU0.SR0, CCU40.SR3, ERU0.SR3, BCCU0.SR0 | CCU40.SR3 */
 197              	#endif
 198              	
 200              	/* ================== END OF VECTOR TABLE DEFINITION ======================= */
 201              	
 202              	/* ================== START OF VECTOR ROUTINES ============================= */
 203              	
 204              	    .thumb 
 205              		.align 1
 206              	 
 207              	/* Reset Handler */
 208              	    .thumb_func 
 209              	    .globl  Reset_Handler
 211              	Reset_Handler: 
 212              	/* Initialize interrupt veneer */
 213 001c 1149     		ldr	r1, =eROData
 214 001e 124A     		ldr	r2, =VeneerStart
 215 0020 124B     		ldr	r3, =VeneerEnd
 216 0022 00F018F8 		bl  __copy_data
 217              	
 218 0026 1248     	    ldr  r0, =SystemInit
 219 0028 8047     	    blx  r0
 220              		
 221              	/* Initialize data */
 222 002a 1249     		ldr	r1, =DataLoadAddr
 223 002c 124A     		ldr	r2, =__data_start
 224 002e 134B     		ldr	r3, =__data_end
 225 0030 00F011F8 		bl  __copy_data
 226              	
 227              	/* RAM code */
 228 0034 1249     		ldr	r1, =__ram_code_load
 229 0036 134A     		ldr	r2, =__ram_code_start
 230 0038 134B     		ldr	r3, =__ram_code_end
 231 003a 00F00CF8 		bl  __copy_data
 232              	
 233              	/*  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 234              	 *  The BSS section is specified by following symbols
 235              	 *    __bss_start__: start of the BSS section.
 236              	 *    __bss_end__: end of the BSS section.
 237              	 *
 238              	 *  Both addresses must be aligned to 4 bytes boundary.
 239              	 */
 240              	#ifndef __SKIP_BSS_CLEAR
 241 003e 1349     		ldr	r1, =__bss_start
 242 0040 134A     		ldr	r2, =__bss_end
 243              	
 244 0042 0020     		movs	r0, 0
 245              	
 246 0044 521A     		subs	r2, r1
 247 0046 02DD     		ble	.L_loop3_done
 248              	
 249              	.L_loop3:
 250 0048 043A     		subs	r2, #4
 251 004a 8850     		str	r0, [r1, r2]
 252 004c FCDC     		bgt	.L_loop3
 253              	.L_loop3_done:
 254              	#endif /* __SKIP_BSS_CLEAR */
 255              	
 256              	#ifndef __SKIP_LIBC_INIT_ARRAY
 257 004e 1148     	    ldr  r0, =__libc_init_array
 258 0050 8047     	    blx  r0
 259              	#endif
 260              	
 261 0052 1148     	    ldr  r0, =main
 262 0054 8047     	    blx  r0
 263              	
 264              	    .thumb_func
 266              	__copy_data:
 267              	/*  The ranges of copy from/to are specified by following symbols
 268              	 *    r1: start of the section to copy from.
 269              	 *    r2: start of the section to copy to
 270              	 *    r3: end of the section to copy to
 271              	 *
 272              	 *  All addresses must be aligned to 4 bytes boundary.
 273              	 *  Uses r0
 274              	 */
 275 0056 9B1A     		subs	r3, r2
 276 0058 03DD     		ble	.L_loop_done
 277              	
 278              	.L_loop:
 279 005a 043B     		subs	r3, #4
 280 005c C858     		ldr	r0, [r1,r3]
 281 005e D050     		str	r0, [r2,r3]
 282 0060 FBDC     		bgt	.L_loop
 283              	
 284              	.L_loop_done:
 285 0062 7047     		bx  lr
 286              	
 287 0064 00000000 		.pool
 287      00000000 
 287      00000000 
 287      00000000 
 287      00000000 
 289              	/* ======================================================================== */
 290              	/* ========== START OF EXCEPTION HANDLER DEFINITION ======================== */
 291              	
 292              		.align 1
 293              	    
 294              	    .thumb_func
 295              	    .weak Default_handler
 297              	Default_Handler:
 298 009c FEE7     	    b  .
 300              	
 301              	    Insert_InterruptHandler HardFault
 302              	    Insert_InterruptHandler SVC
 303              	    Insert_InterruptHandler PendSV
 304              	    Insert_InterruptHandler SysTick
 305              	
 306              	    Insert_InterruptHandler IRQ0
 307              	    Insert_InterruptHandler IRQ1
 308              	    Insert_InterruptHandler IRQ2
 309              	    Insert_InterruptHandler IRQ3
 310              	    Insert_InterruptHandler IRQ4
 311              	    Insert_InterruptHandler IRQ5
 312              	    Insert_InterruptHandler IRQ6
 313              	    Insert_InterruptHandler IRQ7
 314              	    Insert_InterruptHandler IRQ8
 315              	    Insert_InterruptHandler IRQ9
 316              	    Insert_InterruptHandler IRQ10
 317              	    Insert_InterruptHandler IRQ11
 318              	    Insert_InterruptHandler IRQ12
 319              	    Insert_InterruptHandler IRQ13
 320              	    Insert_InterruptHandler IRQ14
 321              	    Insert_InterruptHandler IRQ15
 322              	    Insert_InterruptHandler IRQ16
 323              	    Insert_InterruptHandler IRQ17
 324              	    Insert_InterruptHandler IRQ18
 325              	    Insert_InterruptHandler IRQ19
 326              	    Insert_InterruptHandler IRQ20
 327              	    Insert_InterruptHandler IRQ21
 328              	    Insert_InterruptHandler IRQ22
 329              	    Insert_InterruptHandler IRQ23
 330              	    Insert_InterruptHandler IRQ24
 331              	    Insert_InterruptHandler IRQ25
 332              	    Insert_InterruptHandler IRQ26
 333              	    Insert_InterruptHandler IRQ27
 334              	    Insert_InterruptHandler IRQ28
 335              	    Insert_InterruptHandler IRQ29
 336              	    Insert_InterruptHandler IRQ30
 337              	    Insert_InterruptHandler IRQ31
 338              	   
 339              	/* ======================================================================== */
 340              	
 341              	/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
 342 009e 0000     	    .section ".XmcVeneerCode","ax",%progbits
 343              	    
 344              	    .align 1
 345              	    
 346 0000 2C480047 		Insert_InterruptVeener HardFault
 347 0004 00000000 	    .long 0
 348 0008 00000000 	    .long 0
 349 000c 00000000 	    .long 0
 350 0010 00000000 	    .long 0
 351 0014 00000000 	    .long 0
 352 0018 00000000 	    .long 0
 353 001c 00000000 	    .long 0
 354 0020 25480047 		Insert_InterruptVeener SVC
 355 0024 00000000 	    .long 0
 356 0028 00000000 	    .long 0
 357 002c 23480047 		Insert_InterruptVeener PendSV	
 358 0030 23480047 		Insert_InterruptVeener SysTick
 359              		
 360 0034 23480047 		Insert_InterruptVeener IRQ0	
 361 0038 23480047 		Insert_InterruptVeener IRQ1	
 362 003c 23480047 		Insert_InterruptVeener IRQ2	
 363 0040 23480047 		Insert_InterruptVeener IRQ3	
 364 0044 23480047 		Insert_InterruptVeener IRQ4	
 365 0048 23480047 		Insert_InterruptVeener IRQ5	
 366 004c 23480047 		Insert_InterruptVeener IRQ6	
 367 0050 23480047 		Insert_InterruptVeener IRQ7	
 368 0054 23480047 		Insert_InterruptVeener IRQ8	
 369 0058 23480047 		Insert_InterruptVeener IRQ9	
 370 005c 23480047 		Insert_InterruptVeener IRQ10	
 371 0060 23480047 		Insert_InterruptVeener IRQ11	
 372 0064 23480047 		Insert_InterruptVeener IRQ12	
 373 0068 23480047 		Insert_InterruptVeener IRQ13	
 374 006c 23480047 		Insert_InterruptVeener IRQ14	
 375 0070 23480047 		Insert_InterruptVeener IRQ15	
 376 0074 23480047 		Insert_InterruptVeener IRQ16	
 377 0078 23480047 		Insert_InterruptVeener IRQ17	
 378 007c 23480047 		Insert_InterruptVeener IRQ18	
 379 0080 23480047 		Insert_InterruptVeener IRQ19	
 380 0084 23480047 		Insert_InterruptVeener IRQ20
 381 0088 23480047 		Insert_InterruptVeener IRQ21
 382 008c 23480047 		Insert_InterruptVeener IRQ22	
 383 0090 23480047 		Insert_InterruptVeener IRQ23	
 384 0094 23480047 		Insert_InterruptVeener IRQ24	
 385 0098 23480047 		Insert_InterruptVeener IRQ25	
 386 009c 23480047 		Insert_InterruptVeener IRQ26	
 387 00a0 23480047 		Insert_InterruptVeener IRQ27	
 388 00a4 23480047 		Insert_InterruptVeener IRQ28	
 389 00a8 23480047 		Insert_InterruptVeener IRQ29	
 390 00ac 23480047 		Insert_InterruptVeener IRQ30	
 391 00b0 23480047 		Insert_InterruptVeener IRQ31	
 392              	
 393              	/* ======================================================================== */
 394              	/* ======================================================================== */
 395              	
 396              	/* ============= END OF INTERRUPT HANDLER DEFINITION ======================== */
 397              	
 398 00b4 00000000 	    .end
 398      00000000 
 398      00000000 
 398      00000000 
 398      00000000 
DEFINED SYMBOLS
../Startup/startup_XMC1400.S:137    .reset:00000000 $d
../Startup/startup_XMC1400.S:141    .reset:00000000 __Vectors
../Startup/startup_XMC1400.S:211    .reset:0000001c Reset_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c HardFault_Handler
../Startup/startup_XMC1400.S:213    .reset:0000001c $t
../Startup/startup_XMC1400.S:266    .reset:00000056 __copy_data
../Startup/startup_XMC1400.S:287    .reset:00000064 $d
../Startup/startup_XMC1400.S:297    .reset:0000009c Default_Handler
../Startup/startup_XMC1400.S:298    .reset:0000009c $t
../Startup/startup_XMC1400.S:297    .reset:0000009c SVC_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c PendSV_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c SysTick_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ0_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ1_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ2_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ3_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ4_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ5_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ6_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ7_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ8_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ9_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ10_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ11_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ12_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ13_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ14_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ15_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ16_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ17_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ18_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ19_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ20_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ21_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ22_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ23_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ24_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ25_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ26_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ27_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ28_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ29_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ30_Handler
../Startup/startup_XMC1400.S:297    .reset:0000009c IRQ31_Handler
../Startup/startup_XMC1400.S:344    .XmcVeneerCode:00000000 $t
../Startup/startup_XMC1400.S:346    .XmcVeneerCode:00000000 HardFault_Veener
../Startup/startup_XMC1400.S:347    .XmcVeneerCode:00000004 $d
../Startup/startup_XMC1400.S:354    .XmcVeneerCode:00000020 SVC_Veener
../Startup/startup_XMC1400.S:354    .XmcVeneerCode:00000020 $t
../Startup/startup_XMC1400.S:355    .XmcVeneerCode:00000024 $d
../Startup/startup_XMC1400.S:357    .XmcVeneerCode:0000002c PendSV_Veener
../Startup/startup_XMC1400.S:357    .XmcVeneerCode:0000002c $t
../Startup/startup_XMC1400.S:358    .XmcVeneerCode:00000030 SysTick_Veener
../Startup/startup_XMC1400.S:360    .XmcVeneerCode:00000034 IRQ0_Veener
../Startup/startup_XMC1400.S:361    .XmcVeneerCode:00000038 IRQ1_Veener
../Startup/startup_XMC1400.S:362    .XmcVeneerCode:0000003c IRQ2_Veener
../Startup/startup_XMC1400.S:363    .XmcVeneerCode:00000040 IRQ3_Veener
../Startup/startup_XMC1400.S:364    .XmcVeneerCode:00000044 IRQ4_Veener
../Startup/startup_XMC1400.S:365    .XmcVeneerCode:00000048 IRQ5_Veener
../Startup/startup_XMC1400.S:366    .XmcVeneerCode:0000004c IRQ6_Veener
../Startup/startup_XMC1400.S:367    .XmcVeneerCode:00000050 IRQ7_Veener
../Startup/startup_XMC1400.S:368    .XmcVeneerCode:00000054 IRQ8_Veener
../Startup/startup_XMC1400.S:369    .XmcVeneerCode:00000058 IRQ9_Veener
../Startup/startup_XMC1400.S:370    .XmcVeneerCode:0000005c IRQ10_Veener
../Startup/startup_XMC1400.S:371    .XmcVeneerCode:00000060 IRQ11_Veener
../Startup/startup_XMC1400.S:372    .XmcVeneerCode:00000064 IRQ12_Veener
../Startup/startup_XMC1400.S:373    .XmcVeneerCode:00000068 IRQ13_Veener
../Startup/startup_XMC1400.S:374    .XmcVeneerCode:0000006c IRQ14_Veener
../Startup/startup_XMC1400.S:375    .XmcVeneerCode:00000070 IRQ15_Veener
../Startup/startup_XMC1400.S:376    .XmcVeneerCode:00000074 IRQ16_Veener
../Startup/startup_XMC1400.S:377    .XmcVeneerCode:00000078 IRQ17_Veener
../Startup/startup_XMC1400.S:378    .XmcVeneerCode:0000007c IRQ18_Veener
../Startup/startup_XMC1400.S:379    .XmcVeneerCode:00000080 IRQ19_Veener
../Startup/startup_XMC1400.S:380    .XmcVeneerCode:00000084 IRQ20_Veener
../Startup/startup_XMC1400.S:381    .XmcVeneerCode:00000088 IRQ21_Veener
../Startup/startup_XMC1400.S:382    .XmcVeneerCode:0000008c IRQ22_Veener
../Startup/startup_XMC1400.S:383    .XmcVeneerCode:00000090 IRQ23_Veener
../Startup/startup_XMC1400.S:384    .XmcVeneerCode:00000094 IRQ24_Veener
../Startup/startup_XMC1400.S:385    .XmcVeneerCode:00000098 IRQ25_Veener
../Startup/startup_XMC1400.S:386    .XmcVeneerCode:0000009c IRQ26_Veener
../Startup/startup_XMC1400.S:387    .XmcVeneerCode:000000a0 IRQ27_Veener
../Startup/startup_XMC1400.S:388    .XmcVeneerCode:000000a4 IRQ28_Veener
../Startup/startup_XMC1400.S:389    .XmcVeneerCode:000000a8 IRQ29_Veener
../Startup/startup_XMC1400.S:390    .XmcVeneerCode:000000ac IRQ30_Veener
../Startup/startup_XMC1400.S:391    .XmcVeneerCode:000000b0 IRQ31_Veener
../Startup/startup_XMC1400.S:398    .XmcVeneerCode:000000b4 $d
../Startup/startup_XMC1400.S:342    .reset:0000009e $d

UNDEFINED SYMBOLS
__initial_sp
eROData
VeneerStart
VeneerEnd
SystemInit
DataLoadAddr
__data_start
__data_end
__ram_code_load
__ram_code_start
__ram_code_end
__bss_start
__bss_end
__libc_init_array
main
